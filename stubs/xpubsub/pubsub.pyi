from _typeshed import Incomplete
from enum import Enum
from typing import Any, Callable, Hashable, Iterable, Union

HashOrList = Union[Hashable, list[Hashable]]

class Alerts(Enum):
    ADD: Incomplete
    ALL: Incomplete
    NEW: Incomplete
    REMOVE: Incomplete
    SEND: Incomplete

def fix(topic_list: HashOrList) -> list[Hashable]: ...

class PubSub:
    def __init__(self) -> None: ...
    def new_topic(self, topic: Hashable) -> set[Callable]: ...
    def remove_topic(self, topic: Hashable) -> None: ...
    def get_topics(self) -> Iterable[Hashable]: ...
    def subscribers(self, topic: Hashable) -> set[Callable]: ...
    def add(self, topic_list: HashOrList, callback: Callable): ...
    def remove(self, topic_list: HashOrList, callback: Callable): ...
    def send(self, topic_list: HashOrList, message): ...
    def send_alert(self, alert: Alerts, topic: Hashable, message: Any): ...
